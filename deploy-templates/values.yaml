global:
  # -- platform type that can be "kubernetes" or "openshift"
  platform: "openshift"
  # -- a cluster DNS wildcard name
  dnsWildCard:
  # -- Administrators of your tenant
  admins:
    - "stub_user_one@example.com"
  # -- Developers of your tenant
  developers:
    - "stub_user_one@example.com"
    - "stub_user_two@example.com"
  openshift:
    # -- Which type of kind will be deployed to Openshift (values: deployments/deploymentConfigs)
    deploymentType: "deployments"
  # -- Gerrit SSH node port
  gerritSSHPort: "30022"

# -- component name
name: gerrit-operator
annotations: {}
nodeSelector: {}
tolerations: []
affinity: {}
image:
  # -- EDP gerrit-operator Docker image name. The released image can be found on [Dockerhub](https://hub.docker.com/r/epamedp/gerrit-operator)
  repository: epamedp/gerrit-operator
  # -- if not defined then .Chart.AppVersion is used
  # -- EDP gerrit-operator Docker image tag. The released image can be found on [Dockerhub](https://hub.docker.com/r/epamedp/gerrit-operator/tags)
  tag:
imagePullPolicy: "IfNotPresent"

# --  Define interval for synchronizing Gerrit Projects with GerritProject CustomResources
# --  Default: 5 minutes
# --  Format: golang time.Duration-formatted string
projectSyncInterval: 1h

# -- Define constant requeue interval for GerritGroupMember controller
# -- If not defined the exponential formula with the max value of 1hr will be used
groupMemberSyncInterval: 30m

resources:
  limits:
    memory: 192Mi
  requests:
    cpu: 50m
    memory: 64Mi

gerrit:
  # --  Flag to enable/disable Gerrit deploy
  deploy: true
  # --  Gerrit name
  name: "gerrit"
  # -- Define gerrit docker image name
  image: "epamedp/edp-gerrit"
  # -- Define gerrit docker image tag
  version: "3.6.2-oauth"
  # -- If defined, a imagePullPolicy applied for gerrit deployment
  imagePullPolicy: "IfNotPresent"
  # --  Secrets to pull from private Docker registry;
  imagePullSecrets:
  # -- HTTP port
  port: "8080"
  storage:
    # --  Size for Gerrit data volume
    size: 1Gi
    # --  Storageclass for Gerrit data volume
    # class: gp2
  # --  Base path for Nexus URL
  basePath: ""
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Provide external endpoint access. Default Ingress/Route host pattern: gerrit-{{ .Release.Namespace }}.{{ .Values.global.dnsWildCard }}
  ingress:
    annotations: {}
    # --  pathType is only for k8s >= 1.1=
    pathType: Prefix
    # --  For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # --  See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # ingressClassName: nginx
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - gerrit-edp.example.com

  resources:
    limits:
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 512Mi

  # Provide a secret containing one or more certificate files in the keys that will be added to cacerts
  # The cacerts file will be set via JAVA_OPTIONS
  caCerts:
    # -- Flag for enabling additional CA certificates
    enabled: false
    # -- Change init CA certificates container image
    image: adoptopenjdk/openjdk11:alpine
    # -- Name of the secret containing additional CA certificates
    secret: secret-name

  # -- Values to add to JAVA_OPTIONS
  javaOptions: ""
  # -- Additional environment variables
  extraEnv: []
    # - name: AUTH_TYPE
    #   value: OAUTH
    # - name: OAUTH_KEYCLOAK_CLIENT_ID
    #   value: gerrit
    # - name: OAUTH_KEYCLOAK_REALM
    #   value: shared
    # - name: OAUTH_KEYCLOAK_ROOT_URL
    #   value: https://keycloak.example.com/auth
    # - name: OAUTH_KEYCLOAK_CLIENT_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name: gerrit-is-credentials
    #       key: clientSecret
  sso:
    # Create kind: KeycloakClient as a part of chart installation
    enabled: true
    # Can be Realm or KeycloakRealm.
    kind: KeycloakRealm
    # Name of kind: Realm/KeycloakRealm CR.
    name: main
